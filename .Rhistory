dim(data1)
dim(data2)
dim(data3)
View(data1)
# Read data from the first CSV file
data1 <- read.csv("US_airlines.csv")
# Read data from the second CSV file
data2 <- read.csv("US_airrecords14.csv")
# Read data from the third CSV file
data3 <- read.csv("US_airports.csv")
dim(data1) #
dim(data2)
dim(data3)
summary(data1)
setwd("~/TUS/Year2/InterpritationOfData/Assignment")
gc()
install.packages("unix")
library(unix)
file.edit(file.path("~", ".Rprofile"))
invisible(utils::memory.limit(size = 60000))
gc()
gc()
gc()
gc()
install.packages("dplyr")
library(dplyr)
library(MASS)
library(stringr)
library(ggplot2)
# Read data from the first CSV file
data1 <- read.csv("US_airlines.csv")
# Read data from the second CSV file
data2 <- read.csv("US_airrecords14.csv")
# Read data from the third CSV file
data3 <- read.csv("US_airports.csv")
dim(data1) # 14 rows and 2 columns
dim(data2) # 231603 rows and 31 columns
dim(data3) #322 rows and 7 columns
summary(data2)
summary(data1)
summary(data3)
# join data set 1 with 2 on IATA_CODE
merged_data <- inner_join(data2, data1, by = 'IATA_CODE')
#join dataset 1 with mergdata on origin airport
merged_data <- inner_join(data3, merged_data, by = c("ORIGIN_AIRPORT"))
#Finial dataset merged_data contains 231603 rows and 38 columns indicating there are no duplicate rows created after the joining tables.
# this will be the final dataset we will be using for analysis
summary(merged_data)
# Select all excluding delay columns and Diverted,cancelled , cancellation reason
merged_data1 <- merged_data[,-30:-37]
# mean of missing vlues
colMeans(is.na(merged_data1))
# remove rows with missing vlues
merged_data1<- merged_data1 %>%
na.omit
# no missing values
num_missing <- colSums(is.na(merged_data1))
print(num_missing)
merged_data1 <- merged_data1 %>%
mutate(DATE = as.Date(paste(YEAR, MONTH, DAY, sep = "-")))%>%
mutate(DAYOFTHEWEEK = as.factor(case_when(
DAY_OF_WEEK == 1 ~ "Monday",
DAY_OF_WEEK == 2 ~ "Tuesday",
DAY_OF_WEEK == 3 ~ "Wednesday",
DAY_OF_WEEK == 4 ~ "Thursday",
DAY_OF_WEEK == 5 ~ "Friday",
DAY_OF_WEEK == 6 ~ "Saturday",
DAY_OF_WEEK == 7 ~ "Sunday"
)))%>%
relocate(DATE: DAYOFTHEWEEK, .before = IATA_CODE)
# drop columns Months,Day and Day_of_week as we have combined these into Date column
#Finial dataset now contains only 28 columns and 228,252 rows
merged_data1 <- subset(merged_data1, select = -c(YEAR, MONTH, DAY,DAY_OF_WEEK))
# NOTE that Date column is now of type 'date' and Dayoftheweek is now a 'factor'.
sapply(merged_data1, class)
count_rows <- merged_data1 %>%
group_by(AIRLINE) %>%
summarize(count = n())%>%
arrange((AIRLINE))
count_rows
ggplot(data=count_rows, aes(x=AIRLINE, y=count,fill=AIRLINE)) +
geom_bar(stat="identity")+
geom_text(aes(label=count), vjust=-0.3, size=3.5,color = "black")+
theme_minimal()+
coord_flip()
count_ORIGIN_AIRPORT <- merged_data1 %>%
group_by(AIRPORT,ORIGIN_AIRPORT) %>%
summarize(count = n())%>%
arrange(desc(count))
count_ORIGIN_AIRPORT
selected_rows <- merged_data1 %>%
select(ORIGIN_AIRPORT,AIRLINE)%>%
filter(DEPARTURE_DELAY < 10)
selected_rows <- merged_data1 %>%
filter(DEPARTURE_DELAY < 10)%>%
select(ORIGIN_AIRPORT,AIRLINE)
merged_data1 %>%
select(ORIGIN_AIRPORT,AIRLINE)
library(dplyr)
library(MASS)
library(stringr)
library(ggplot2)
merged_data1 %>%
select(ORIGIN_AIRPORT,AIRLINE)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(MASS)
library(stringr)
library(ggplot2)
merged_data1 %>%
select(ORIGIN_AIRPORT,AIRLINE)
subset_data <- merged_data1 %>%
filter(DEPARTURE_DELAY <10)
subset_data <- merged_data1 %>%
filter(DEPARTURE_DELAY <10)
subset_data
merged_data1 %>%
select(ORIGIN_AIRPORT)
# Assuming 'df' is your data frame
Subset_1 <- merged_data1[c("ORIGIN_AIRPORT ", "DEPARTURE_DELAY")]
# Assuming 'df' is your data frame
Subset_1 <- merged_data1[c("ORIGIN_AIRPORT ", "DEPARTURE_DELAY")]
a1 <- group_by(DEPARTURE_DELAY)
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(mean = DEPARTURE_DELAY)%>%
arrange((ORIGIN_AIRPORT))
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(mean = DEPARTURE_DELAY)%>%
arrange((ORIGIN_AIRPORT))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay = mean(DEPARTURE_DELAY))%>%
arrange((ORIGIN_AIRPORT))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY)),0)%>%
filter(avg_delay > 30)%>%
arrange((ORIGIN_AIRPORT))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY)),0)%>%
filter(avg_delay > 15)%>%
arrange((ORIGIN_AIRPORT))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY)),0)%>%
filter(avg_delay > 15)%>%
arrange((avg_delay))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY)),0)%>%
filter(avg_delay > 15)%>%
arrange(desc(avg_delay))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY),0))%>%
filter(avg_delay > 15)%>%
arrange(desc(avg_delay))
count_rows
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY),0))%>%
filter(avg_delay > 15)%>%
arrange(desc(avg_delay))
head(count_rows,5)
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY),0))%>%
filter(avg_delay > 15)%>%
arrange(desc(avg_delay))
head(count_rows,5)
count_rows <- merged_data1 %>%
group_by(ORIGIN_AIRPORT,AIRPORT) %>%
summarize(avg_delay =round(mean(DEPARTURE_DELAY),0))%>%
filter(avg_delay > 15)%>%
arrange(desc(avg_delay))
head(count_rows,5)
count_rows
DEPARTURE_DELAY
a<-head(count_ORIGIN_AIRPORT)
b<-count_rows
filtered_data <- b %>%
filter(b$AIRPORT %in% a)
a<-head(count_ORIGIN_AIRPORT)
b<-count_rows
a
filtered_data <- b %>%
filter(b$AIRPORT %in% a$AIRPORT)
a<-head(count_ORIGIN_AIRPORT$AIRPORT)
b<-count_rows
a
filtered_data <- b %>%
filter(b$AIRPORT %in% a)
a<-head(count_ORIGIN_AIRPORT$AIRPORT)
b<-count_rows
d<-as.list(a)
a<-head(count_ORIGIN_AIRPORT$AIRPORT)
b<-count_rows
d<-as.list(a)
d
filtered_data <- b %>%
filter(b$AIRPORT %in% d)
filtered_data <- b %>%
filter(b$AIRPORT)
a<-head(count_ORIGIN_AIRPORT$AIRPORT)
b<-count_rows
d<-as.list(a)
d
d<-c("Hartsfield-Jackson Atlanta International Airport","Chicago O'Hare International Airport","Dallas/Fort Worth International Airport","Los Angeles International Airport","Denver International Airport","Phoenix Sky Harbor International Airport")
filtered_data <- count_rows %>%
filter(count_rows$AIRPORT %in% d)
count_DAY_OF_WEEK <- merged_data1 %>%
group_by(AIRPORT,DAY_OF_WEEK) %>%
summarize(count = n())%>%
arrange(desc(count))
count_DAY_OF_WEEK <- merged_data1 %>%
group_by(AIRPORT,DAYOFTHEWEEK) %>%
summarize(count = n())%>%
arrange(desc(count))
count_DAY_OF_WEEK
count_DAY_OF_WEEK <- merged_data1 %>%
group_by(AIRPORT,DAYOFTHEWEEK) %>%
summarize(count = n())%>%
arrange(desc(count))%>%
filter(AIRPORT=='Hartsfield-Jackson Atlanta International Airport')
count_DAY_OF_WEEK
count_DAY_OF_WEEK <- merged_data1 %>%
group_by(AIRPORT,DAYOFTHEWEEK) %>%
summarize(count = n())%>%
arrange((count))%>%
filter(AIRPORT=='Hartsfield-Jackson Atlanta International Airport')
count_DAY_OF_WEEK
count_DAY_OF_WEEK <- merged_data1 %>%
group_by(AIRPORT,ORIGIN_AIRPORT,DAYOFTHEWEEK) %>%
summarize(count = n())%>%
arrange((count))%>%
filter(AIRPORT=='Hartsfield-Jackson Atlanta International Airport')
count_DAY_OF_WEEK
install.packages("rnaturalearthdata")
library(rnaturalearth)  # For world map data
count_rows <- merged_data1 %>%
group_by(AIRLINE) %>%
summarize(count = n())%>%
arrange(desc(count))
count_rows
count_Location  <- merged_data1 %>%
group_by(AIRLINE,LONGITUDE,LATITUDE) %>%
summarize(count = n())%>%
arrange(desc(count))
count_Location
count_Location  <- merged_data1 %>%
group_by(AIRPORT,LONGITUDE,LATITUDE) %>%
summarize(count = n())%>%
arrange(desc(count))
count_Location
count_Location  <- merged_data1 %>%
group_by(STATE,LONGITUDE,LATITUDE) %>%
summarize(count = n())%>%
arrange(desc(count))
count_Location
count_Location <- count_Location %>%
mutate(marker_size = count / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", count, "State:", STATE))
count_Location <- count_Location %>%
mutate(marker_size = count / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", count, "State:", STATE))
count_Location
count_Location  <- merged_data1 %>%
group_by(STATE,AIRPORT,LONGITUDE,LATITUDE) %>%
summarize(count = n())%>%
arrange(desc(count))
count_Location
count_Location <- count_Location %>%
mutate(marker_size = count / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", count, "State:", AIRPORT))
count_Location
count_Location <- count_Location %>%
mutate(marker_size = count / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", count, "AIRPORT:", AIRPORT))
count_Location
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE , size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = flight_counts, aes(label = popup_text), vjust = -0.5, nudge_y = 0.02)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE , size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = count_Location, aes(label = popup_text), vjust = -0.5, nudge_y = 0.02)
flight_counts <- flight_counts %>%
mutate(marker_size = COUNTSOFROUTS / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", COUNTSOFROUTS, "State:", STATE))
flight_counts <- merged_data3 %>%
group_by(STATE_Origin,LATITUDE_Origin,LONGITUDE_Origin) %>%
summarise(AIRPORT_Origin = n())%>%
rename(STATE = STATE_Origin)%>%
rename(COUNTSOFROUTS = AIRPORT_Origin)%>%
arrange(desc(COUNTSOFROUTS))%>%
head(15)
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE , size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom")
# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE , size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = count_Location, aes(label = popup_text), vjust = -0.5, nudge_y = 0.02)
install.packages("leaflet")
library(leaflet)
count_Location <- count_Location %>%
mutate(marker_size = count / 50,  # Adjust the multiplier for marker size
popup_text = paste("Count:", count, "AIRPORT:", AIRPORT))
count_Location
# Create a map
usa_airports_map <- leaflet(count_Location) %>%
addTiles() %>%
addCircleMarkers(
lng = ~LONGITUDE,
lat = ~LATITUDE ,
radius = ~(count/100),  # Adjust the multiplier for marker size
color = "blue",  # Marker color
#fillOpacity = 0.6,  # Opacity of the marker fill
popup = ~paste("Count:", count, "AIRPORT:", AIRPORT)
)
# Display the map
usa_airports_map
# Create a map
usa_airports_map <- leaflet(count_Location) %>%
addTiles() %>%
addCircleMarkers(
lng = ~LONGITUDE,
lat = ~LATITUDE ,
radius = ~(count/50),  # Adjust the multiplier for marker size
color = "blue",  # Marker color
#fillOpacity = 0.6,  # Opacity of the marker fill
popup = ~paste("Count:", count, "AIRPORT:", AIRPORT)
)
# Display the map
usa_airports_map
# Create a map
usa_airports_map <- leaflet(count_Location) %>%
addTiles() %>%
addCircleMarkers(
lng = ~LONGITUDE,
lat = ~LATITUDE ,
radius = ~(count/100),  # Adjust the multiplier for marker size
color = "blue",  # Marker color
#fillOpacity = 0.6,  # Opacity of the marker fill
popup = ~paste("Count:", count, "AIRPORT:", AIRPORT)
)
# Display the map
usa_airports_map
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = flight_counts, aes(x = LONGITUDE, y = LATITUDE, size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = flight_counts, aes(label = popup_text,x = LONGITUDE_Origin, y = LATITUDE_Origin), vjust = -0.5, nudge_y = 0.02)
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE, size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = count_Location, aes(label = popup_text,x = LONGITUDE, y = LATITUDE), vjust = -0.5, nudge_y = 0.02)
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
usa
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE, size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = count_Location, aes(label = popup_text,x = LONGITUDE, y = LATITUDE), vjust = -0.5, nudge_y = 0.02)
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filter the world map data to include only the USA
usa <- world %>% filter(admin == "United States of America")
# Create the ggplot2 map
ggplot() +
geom_sf(data = usa, fill = "white", color = "black") +  # USA map outline
geom_point(data = count_Location, aes(x = LONGITUDE, y = LATITUDE, size = marker_size), color = "blue") +
labs(title = "USA Airports by Route Count") +
scale_size_continuous(range = c(2, 20)) +  # Adjust the size range as needed
theme_minimal() +
theme(legend.position = "bottom") +
geom_text(data = count_Location, aes(label = popup_text,x = LONGITUDE, y = LATITUDE), vjust = -0.5, nudge_y = 0.02)
library(ggplot2)
library(ggthemes)
#drawing the map
geo <- list(
scope = 'usa',
projection = list(type = 'world'),
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
# Load the necessary library if not already loaded
install.packages("tidyverse")
install.packages("mapview");
install.packages("sf");library(sf)
install.packages("maps");library (usmap)
install.packages("dplyr")
library(dplyr)
library(MASS)
library(stringr)
library(ggplot2)
library(tidyverse)
library(leaflet)
library(sp)
library(mapview)
install.packages("sf")
install.packages("sf")
# Read data from the first CSV file
data1 <- read.csv("US_airlines.csv")
# Read data from the second CSV file
data2 <- read.csv("US_airrecords14.csv")
# Read data from the second CSV file
data3 <- read.csv("US_airports.csv")
# Read data from the second CSV file
data4 <- read.csv("US_airportsCopy.csv")
# join data set 1 with 2 on IATA_CODE
merged_data <- inner_join(data2, data1, by = "IATA_CODE")
# Write the merged data frame to a new CSV file
#write.csv(merged_data, "merged_data.csv", row.names = FALSE)
#join dataset 1 with mergdata on origin airport
merged_data2 <- inner_join(data3, merged_data, by = c("ORIGIN_AIRPORT"))
# Write the merged data frame to a new CSV file
#write.csv(merged_data2, "merged_data2.csv", row.names = FALSE)
#join dataset 4 with mergdata2 on Destination airport
merged_data3 <- inner_join(data4, merged_data2, by = c("DESTINATION_AIRPORT"))
# Count the number of missing values in each column of the data frame
# no missing values found
num_missing <- colSums(is.na(merged_data3))
#join dataset 4 with mergdata2 on Destination airport
merged_data3 <- inner_join(data4, merged_data2, by = c("DESTINATION_AIRPORT"))
# Read data from the second CSV file
data4 <- read.csv("US_airportsCopy.csv")
setwd("~/TUS/Year2/InterpritationOfData")
data1 <- read.csv("US_airlines.csv")
# Read data from the second CSV file
data2 <- read.csv("US_airrecords14.csv")
# Read data from the second CSV file
data3 <- read.csv("US_airports.csv")
# Read data from the second CSV file
data4 <- read.csv("US_airportsCopy.csv")
# join data set 1 with 2 on IATA_CODE
merged_data <- inner_join(data2, data1, by = "IATA_CODE")
